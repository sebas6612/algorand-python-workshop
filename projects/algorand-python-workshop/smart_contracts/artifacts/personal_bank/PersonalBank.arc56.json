{
    "name": "PersonalBank",
    "structs": {},
    "methods": [
        {
            "name": "deposit",
            "args": [
                {
                    "type": "pay",
                    "name": "pay_txn",
                    "desc": "The payment transaction containing deposit information"
                },
                {
                    "type": "string",
                    "name": "github_handle",
                    "desc": "The GitHub handle of the sender"
                }
            ],
            "returns": {
                "type": "uint64",
                "desc": "The total amount deposited by the sender after this transaction (as UInt64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Deposits funds into the personal bank\nThis method accepts a payment transaction and records the deposit amount in the sender's BoxMap. If the sender already has a deposit, the amount is added to their existing balance.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [],
            "returns": {
                "type": "uint64",
                "desc": "The amount withdrawn (as UInt64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraws all funds from the sender's account\nThis method transfers the entire balance of the sender's account back to them, and resets their balance to zero. The sender must have a deposit to withdraw.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_github_handle",
            "args": [],
            "returns": {
                "type": "string",
                "desc": "The GitHub handle of the sender (as String)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Retrieves the GitHub handle of the sender\nThis method returns the GitHub handle associated with the sender's account. If no handle is found, an empty string is returned.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "depositors": {
                    "keyType": "address",
                    "valueType": "uint64",
                    "prefix": ""
                },
                "github": {
                    "keyType": "address",
                    "valueType": "string",
                    "prefix": "Z2hf"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        141
                    ],
                    "errorMessage": "Deposit amount must be greater than zero"
                },
                {
                    "pc": [
                        184
                    ],
                    "errorMessage": "GitHub handle is required for new depositors"
                },
                {
                    "pc": [
                        210
                    ],
                    "errorMessage": "No deposits found for this account"
                },
                {
                    "pc": [
                        54,
                        70,
                        87
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        135
                    ],
                    "errorMessage": "Receiver must be the contract address"
                },
                {
                    "pc": [
                        122
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        57,
                        73,
                        90
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        162,
                        174
                    ],
                    "errorMessage": "check self.depositors entry exists"
                },
                {
                    "pc": [
                        100
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAQAmAgQVH3x1A2doXzEbQQBdggME2CL/7wQ6OV8rBIy+YX02GgCOAwAjABIAAiNDMRkURDEYRIgArChMULAiQzEZFEQxGESIAH8WKExQsCJDMRkURDEYRDEWIglJOBAiEkQ2GgGIABIWKExQsCJDMRlA/7oxGBREIkOKAgGL/jgHMgoSRIv+OAhJRIv+OABJTgK+RQFBABaLAEm+TBdMRE8CCBa/iwC+TBdMREyJi/+AAgAAE0QpiwBJTgJQSbxIi/+/TBa/Qv/cMQC+TBdMRLExALIHsggishAjsgGztAgxACMWv4kpMQBQvkiJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}